{"ast":null,"code":"import _regeneratorRuntime from \"/Users/user/react-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/user/react-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/user/react-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/user/react-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/user/react-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { createContext, useContext, createElement, useState as useState$2, useRef as useRef$2, useEffect as useEffect$2, isValidElement, cloneElement, Fragment } from 'react';\n\nvar isUndefined = function isUndefined(val) {\n  return val === undefined;\n};\n\nvar isNullOrUndefined = function isNullOrUndefined(value) {\n  return value === null || isUndefined(value);\n};\n\nvar isArray = function isArray(value) {\n  return Array.isArray(value);\n};\n\nvar isObjectType = function isObjectType(value) {\n  return typeof value === 'object';\n};\n\nvar isObject = function isObject(value) {\n  return !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n};\n\nvar isHTMLElement = function isHTMLElement(value) {\n  return isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n};\n\nvar VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit'\n};\nvar VALUE = 'value';\nvar UNDEFINED = 'undefined';\nvar EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input'\n};\nvar INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nvar REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nvar REGEX_IS_PLAIN_PROP = /^\\w*$/;\nvar REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\nvar REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\n\nfunction attachEventListeners(_ref) {\n  var field = _ref.field,\n      handleChange = _ref.handleChange,\n      isRadioOrCheckbox = _ref.isRadioOrCheckbox;\n  var ref = field.ref;\n\n  if (isHTMLElement(ref) && ref.addEventListener && handleChange) {\n    ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n\nvar isKey = function isKey(value) {\n  return !isArray(value) && (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n};\n\nvar stringToPath = function stringToPath(string) {\n  var result = [];\n  string.replace(REGEX_PROP_NAME, function (match, number, quote, string) {\n    result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\n  });\n  return result;\n};\n\nfunction set(object, path, value) {\n  var index = -1;\n  var tempPath = isKey(path) ? [path] : stringToPath(path);\n  var length = tempPath.length;\n  var lastIndex = length - 1;\n\n  while (++index < length) {\n    var key = tempPath[index];\n    var newValue = value;\n\n    if (index !== lastIndex) {\n      var objValue = object[key];\n      newValue = isObject(objValue) || isArray(objValue) ? objValue : !isNaN(tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar transformToNestObject = function transformToNestObject(data) {\n  return Object.entries(data).reduce(function (previous, _ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n\n    if (!isKey(key)) {\n      set(previous, key, value);\n      return previous;\n    }\n\n    return Object.assign(Object.assign({}, previous), _defineProperty({}, key, value));\n  }, {});\n};\n\nvar get = function get(obj, path, defaultValue) {\n  var result = path.split(/[,[\\].]+?/).filter(Boolean).reduce(function (result, key) {\n    return isNullOrUndefined(result) ? result : result[key];\n  }, obj);\n  return isUndefined(result) || result === obj ? obj[path] || defaultValue : result;\n};\n\nvar focusErrorField = function focusErrorField(fields, fieldErrors) {\n  for (var key in fields) {\n    if (get(fieldErrors, key)) {\n      var field = fields[key];\n\n      if (field) {\n        if (isHTMLElement(field.ref) && field.ref.focus) {\n          field.ref.focus();\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n          break;\n        }\n      }\n    }\n  }\n};\n\nvar removeAllEventListeners = function removeAllEventListeners(ref, validateWithStateUpdate) {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n\nvar isRadioInput = function isRadioInput(element) {\n  return !!element && element.type === 'radio';\n};\n\nvar isCheckBoxInput = function isCheckBoxInput(element) {\n  return !!element && element.type === 'checkbox';\n};\n\nfunction isDetached(element) {\n  if (!element) {\n    return true;\n  }\n\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {\n    return false;\n  }\n\n  return isDetached(element.parentNode);\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\n  if (!field) {\n    return;\n  }\n\n  var ref = field.ref,\n      _field$ref = field.ref,\n      name = _field$ref.name,\n      type = _field$ref.type,\n      mutationWatcher = field.mutationWatcher;\n\n  if (!type) {\n    delete fields[name];\n    return;\n  }\n\n  var fieldValue = fields[name];\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\n    var options = fieldValue.options;\n\n    if (isArray(options) && options.length) {\n      options.forEach(function (_ref4, index) {\n        var ref = _ref4.ref,\n            mutationWatcher = _ref4.mutationWatcher;\n\n        if (ref && isDetached(ref) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          options.splice(index, 1);\n        }\n      });\n\n      if (options && !options.length) {\n        delete fields[name];\n      }\n    } else {\n      delete fields[name];\n    }\n  } else if (isDetached(ref) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fields[name];\n  }\n}\n\nvar defaultReturn = {\n  isValid: false,\n  value: ''\n};\n\nvar getRadioValue = function getRadioValue(options) {\n  return isArray(options) ? options.reduce(function (previous, _ref5) {\n    var _ref5$ref = _ref5.ref,\n        checked = _ref5$ref.checked,\n        value = _ref5$ref.value;\n    return checked ? {\n      isValid: true,\n      value: value\n    } : previous;\n  }, defaultReturn) : defaultReturn;\n};\n\nvar getMultipleSelectValue = function getMultipleSelectValue(options) {\n  return _toConsumableArray(options).filter(function (_ref6) {\n    var selected = _ref6.selected;\n    return selected;\n  }).map(function (_ref7) {\n    var value = _ref7.value;\n    return value;\n  });\n};\n\nvar isFileInput = function isFileInput(element) {\n  return !!element && element.type === 'file';\n};\n\nvar isMultipleSelect = function isMultipleSelect(element) {\n  return !!element && element.type === 'select-multiple';\n};\n\nvar isEmptyString = function isEmptyString(value) {\n  return value === '';\n};\n\nvar defaultResult = {\n  value: false,\n  isValid: false\n};\nvar validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = function getCheckboxValue(options) {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      var values = options.filter(function (_ref8) {\n        var checked = _ref8.ref.checked;\n        return checked;\n      }).map(function (_ref9) {\n        var value = _ref9.ref.value;\n        return value;\n      });\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    var _options$0$ref = options[0].ref,\n        checked = _options$0$ref.checked,\n        value = _options$0$ref.value,\n        attributes = _options$0$ref.attributes;\n    return checked ? attributes && !isUndefined(attributes.value) ? isUndefined(value) || isEmptyString(value) ? validResult : {\n      value: value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nfunction getFieldValue(fields, ref) {\n  var name = ref.name,\n      value = ref.value;\n  var field = fields[name];\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return field ? getRadioValue(field.options).value : '';\n  }\n\n  if (isMultipleSelect(ref)) {\n    return getMultipleSelectValue(ref.options);\n  }\n\n  if (isCheckBoxInput(ref)) {\n    return field ? getCheckboxValue(field.options).value : false;\n  }\n\n  return value;\n}\n\nvar isString = function isString(value) {\n  return typeof value === 'string';\n};\n\nvar getFieldsValues = function getFieldsValues(fields, search) {\n  var output = {};\n  var isSearchString = isString(search);\n  var isSearchArray = isArray(search);\n  var isNest = search && search.nest;\n\n  var _loop = function _loop(name) {\n    if (isUndefined(search) || isNest || isSearchString && name.startsWith(search) || isSearchArray && search.find(function (data) {\n      return name.startsWith(data);\n    })) {\n      output[name] = getFieldValue(fields, fields[name].ref);\n    }\n  };\n\n  for (var name in fields) {\n    _loop(name);\n  }\n\n  return output;\n};\n\nvar isEmptyObject = function isEmptyObject(value) {\n  return isObject(value) && !Object.keys(value).length;\n};\n\nvar compareObject = function compareObject() {\n  var objectA = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var objectB = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Object.entries(objectA).reduce(function (previous, _ref10) {\n    var _ref11 = _slicedToArray(_ref10, 2),\n        key = _ref11[0],\n        value = _ref11[1];\n\n    return previous ? objectB[key] && objectB[key] === value : false;\n  }, true);\n};\n\nvar isSameError = function isSameError(error, _ref12) {\n  var type = _ref12.type,\n      types = _ref12.types,\n      message = _ref12.message;\n  return isObject(error) && error.type === type && error.message === message && compareObject(error.types, types);\n};\n\nfunction shouldUpdateWithError(_ref13) {\n  var errors = _ref13.errors,\n      name = _ref13.name,\n      error = _ref13.error,\n      validFields = _ref13.validFields,\n      fieldsWithValidation = _ref13.fieldsWithValidation;\n  var isFieldValid = isEmptyObject(error);\n  var isFormValid = isEmptyObject(errors);\n  var currentFieldError = get(error, name);\n  var existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name) || existFieldError && existFieldError.isManual) {\n    return false;\n  }\n\n  if (isFormValid !== isFieldValid || !isFormValid && !existFieldError || isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name)) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n\nvar isRegex = function isRegex(value) {\n  return value instanceof RegExp;\n};\n\nvar getValueAndMessage = function getValueAndMessage(validationData) {\n  var isPureObject = isObject(validationData) && !isRegex(validationData);\n  return {\n    value: isPureObject ? validationData.value : validationData,\n    message: isPureObject ? validationData.message : ''\n  };\n};\n\nvar isFunction = function isFunction(value) {\n  return typeof value === 'function';\n};\n\nvar isBoolean = function isBoolean(value) {\n  return typeof value === 'boolean';\n};\n\nfunction getValidateError(result, ref) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n  var isStringValue = isString(result);\n\n  if (isStringValue || isBoolean(result) && !result) {\n    var message = isStringValue ? result : '';\n    return {\n      type: type,\n      message: message,\n      ref: ref\n    };\n  }\n}\n\nvar appendErrors = function appendErrors(name, validateAllFieldCriteria, errors, type, message) {\n  if (!validateAllFieldCriteria) {\n    return {};\n  }\n\n  var error = errors[name];\n  return Object.assign(Object.assign({}, error), {\n    types: Object.assign(Object.assign({}, error && error.types ? error.types : {}), _defineProperty({}, type, message || true))\n  });\n};\n\nvar validateField =\n/*#__PURE__*/\nfunction () {\n  var _ref15 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(fieldsRef, validateAllFieldCriteria, _ref14) {\n    var ref, _ref14$ref, type, value, name, options, required, maxLength, minLength, min, max, pattern, validate, fields, error, isRadio, isCheckBox, isRadioOrCheckbox, isEmpty, appendErrorsCurry, getMinMaxMessage, message, exceedMax, exceedMin, _getValueAndMessage, maxValue, maxMessage, _getValueAndMessage2, minValue, minMessage, valueNumber, valueDate, _getValueAndMessage3, maxLengthValue, maxLengthMessage, _getValueAndMessage4, minLengthValue, minLengthMessage, inputLength, _exceedMax, _exceedMin, _getValueAndMessage5, patternValue, patternMessage, fieldValue, validateRef, result, validateError, validateFunctions, validationResult;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            ref = _ref14.ref, _ref14$ref = _ref14.ref, type = _ref14$ref.type, value = _ref14$ref.value, name = _ref14$ref.name, options = _ref14.options, required = _ref14.required, maxLength = _ref14.maxLength, minLength = _ref14.minLength, min = _ref14.min, max = _ref14.max, pattern = _ref14.pattern, validate = _ref14.validate;\n            fields = fieldsRef.current;\n            error = {};\n            isRadio = isRadioInput(ref);\n            isCheckBox = isCheckBoxInput(ref);\n            isRadioOrCheckbox = isRadio || isCheckBox;\n            isEmpty = isEmptyString(value);\n            appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n            getMinMaxMessage = function getMinMaxMessage(exceedMax, maxLengthMessage, minLengthMessage) {\n              var maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n              var minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n              var message = exceedMax ? maxLengthMessage : minLengthMessage;\n              error[name] = Object.assign({\n                type: exceedMax ? maxType : minType,\n                message: message,\n                ref: ref\n              }, exceedMax ? appendErrorsCurry(maxType, message) : appendErrorsCurry(minType, message));\n\n              if (!validateAllFieldCriteria) {\n                return error;\n              }\n            };\n\n            if (!(required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value)) || isBoolean(value) && !value || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid))) {\n              _context2.next = 14;\n              break;\n            }\n\n            message = isString(required) ? required : getValueAndMessage(required).message;\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.required,\n              message: message,\n              ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n\n            if (validateAllFieldCriteria) {\n              _context2.next = 14;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", error);\n\n          case 14:\n            if (!(!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n              _context2.next = 22;\n              break;\n            }\n\n            _getValueAndMessage = getValueAndMessage(max), maxValue = _getValueAndMessage.value, maxMessage = _getValueAndMessage.message;\n            _getValueAndMessage2 = getValueAndMessage(min), minValue = _getValueAndMessage2.value, minMessage = _getValueAndMessage2.message;\n\n            if (type === 'number' || !type && !isNaN(value)) {\n              valueNumber = ref.valueAsNumber || parseFloat(value);\n\n              if (!isNullOrUndefined(maxValue)) {\n                exceedMax = valueNumber > maxValue;\n              }\n\n              if (!isNullOrUndefined(minValue)) {\n                exceedMin = valueNumber < minValue;\n              }\n            } else {\n              valueDate = ref.valueAsDate || new Date(value);\n\n              if (isString(maxValue)) {\n                exceedMax = valueDate > new Date(maxValue);\n              }\n\n              if (isString(minValue)) {\n                exceedMin = valueDate < new Date(minValue);\n              }\n            }\n\n            if (!(exceedMax || exceedMin)) {\n              _context2.next = 22;\n              break;\n            }\n\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n            if (validateAllFieldCriteria) {\n              _context2.next = 22;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", error);\n\n          case 22:\n            if (!(isString(value) && !isEmpty && (maxLength || minLength))) {\n              _context2.next = 32;\n              break;\n            }\n\n            _getValueAndMessage3 = getValueAndMessage(maxLength), maxLengthValue = _getValueAndMessage3.value, maxLengthMessage = _getValueAndMessage3.message;\n            _getValueAndMessage4 = getValueAndMessage(minLength), minLengthValue = _getValueAndMessage4.value, minLengthMessage = _getValueAndMessage4.message;\n            inputLength = value.toString().length;\n            _exceedMax = maxLength && inputLength > maxLengthValue;\n            _exceedMin = minLength && inputLength < minLengthValue;\n\n            if (!(_exceedMax || _exceedMin)) {\n              _context2.next = 32;\n              break;\n            }\n\n            getMinMaxMessage(!!_exceedMax, maxLengthMessage, minLengthMessage);\n\n            if (validateAllFieldCriteria) {\n              _context2.next = 32;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", error);\n\n          case 32:\n            if (!(pattern && !isEmpty)) {\n              _context2.next = 38;\n              break;\n            }\n\n            _getValueAndMessage5 = getValueAndMessage(pattern), patternValue = _getValueAndMessage5.value, patternMessage = _getValueAndMessage5.message;\n\n            if (!(isRegex(patternValue) && !patternValue.test(value))) {\n              _context2.next = 38;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.pattern,\n              message: patternMessage,\n              ref: ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\n\n            if (validateAllFieldCriteria) {\n              _context2.next = 38;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", error);\n\n          case 38:\n            if (!validate) {\n              _context2.next = 61;\n              break;\n            }\n\n            fieldValue = getFieldValue(fields, ref);\n            validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n            if (!isFunction(validate)) {\n              _context2.next = 52;\n              break;\n            }\n\n            _context2.next = 44;\n            return validate(fieldValue);\n\n          case 44:\n            result = _context2.sent;\n            validateError = getValidateError(result, validateRef);\n\n            if (!validateError) {\n              _context2.next = 50;\n              break;\n            }\n\n            error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n            if (validateAllFieldCriteria) {\n              _context2.next = 50;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", error);\n\n          case 50:\n            _context2.next = 61;\n            break;\n\n          case 52:\n            if (!isObject(validate)) {\n              _context2.next = 61;\n              break;\n            }\n\n            validateFunctions = Object.entries(validate);\n            _context2.next = 56;\n            return new Promise(function (resolve) {\n              validateFunctions.reduce(\n              /*#__PURE__*/\n              function () {\n                var _ref17 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee(previous, _ref16, index) {\n                  var _ref18, key, validate, result, validateResult, validateError;\n\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _ref18 = _slicedToArray(_ref16, 2), key = _ref18[0], validate = _ref18[1];\n                          _context.t2 = isEmptyObject;\n                          _context.next = 4;\n                          return previous;\n\n                        case 4:\n                          _context.t3 = _context.sent;\n                          _context.t1 = !(0, _context.t2)(_context.t3);\n\n                          if (!_context.t1) {\n                            _context.next = 8;\n                            break;\n                          }\n\n                          _context.t1 = !validateAllFieldCriteria;\n\n                        case 8:\n                          _context.t0 = _context.t1;\n\n                          if (_context.t0) {\n                            _context.next = 11;\n                            break;\n                          }\n\n                          _context.t0 = !isFunction(validate);\n\n                        case 11:\n                          if (!_context.t0) {\n                            _context.next = 13;\n                            break;\n                          }\n\n                          return _context.abrupt(\"return\", resolve(previous));\n\n                        case 13:\n                          _context.next = 15;\n                          return validate(fieldValue);\n\n                        case 15:\n                          validateResult = _context.sent;\n                          validateError = getValidateError(validateResult, validateRef, key);\n\n                          if (validateError) {\n                            result = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n\n                            if (validateAllFieldCriteria) {\n                              error[name] = result;\n                            }\n                          } else {\n                            result = previous;\n                          }\n\n                          return _context.abrupt(\"return\", validateFunctions.length - 1 === index ? resolve(result) : result);\n\n                        case 19:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x4, _x5, _x6) {\n                  return _ref17.apply(this, arguments);\n                };\n              }(), {});\n            });\n\n          case 56:\n            validationResult = _context2.sent;\n\n            if (isEmptyObject(validationResult)) {\n              _context2.next = 61;\n              break;\n            }\n\n            error[name] = Object.assign({\n              ref: validateRef\n            }, validationResult);\n\n            if (validateAllFieldCriteria) {\n              _context2.next = 61;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", error);\n\n          case 61:\n            return _context2.abrupt(\"return\", error);\n\n          case 62:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function validateField(_x, _x2, _x3) {\n    return _ref15.apply(this, arguments);\n  };\n}();\n\nvar parseErrorSchema = function parseErrorSchema(error, validateAllFieldCriteria) {\n  return isArray(error.inner) ? error.inner.reduce(function (previous, _ref19) {\n    var path = _ref19.path,\n        message = _ref19.message,\n        type = _ref19.type;\n    return Object.assign(Object.assign({}, previous), previous[path] && validateAllFieldCriteria ? _defineProperty({}, path, appendErrors(path, validateAllFieldCriteria, previous, type, message)) : _defineProperty({}, path, previous[path] || Object.assign({\n      message: message,\n      type: type\n    }, validateAllFieldCriteria ? {\n      types: _defineProperty({}, type, message || true)\n    } : {})));\n  }, {}) : _defineProperty({}, error.path, {\n    message: error.message,\n    type: error.type\n  });\n};\n\nfunction validateWithSchema(_x7, _x8, _x9, _x10, _x11) {\n  return _validateWithSchema.apply(this, arguments);\n}\n\nfunction _validateWithSchema() {\n  _validateWithSchema = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee10(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            if (!validationResolver) {\n              _context10.next = 2;\n              break;\n            }\n\n            return _context10.abrupt(\"return\", validationResolver(data, context));\n\n          case 2:\n            _context10.prev = 2;\n            _context10.next = 5;\n            return validationSchema.validate(data, {\n              abortEarly: false,\n              context: context\n            });\n\n          case 5:\n            _context10.t0 = _context10.sent;\n            _context10.t1 = {};\n            return _context10.abrupt(\"return\", {\n              values: _context10.t0,\n              errors: _context10.t1\n            });\n\n          case 10:\n            _context10.prev = 10;\n            _context10.t2 = _context10[\"catch\"](2);\n            return _context10.abrupt(\"return\", {\n              values: {},\n              errors: transformToNestObject(parseErrorSchema(_context10.t2, validateAllFieldCriteria))\n            });\n\n          case 13:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, null, [[2, 10]]);\n  }));\n  return _validateWithSchema.apply(this, arguments);\n}\n\nvar getDefaultValue = function getDefaultValue(defaultValues, name, defaultValue) {\n  return isUndefined(defaultValues[name]) ? get(defaultValues, name, defaultValue) : defaultValues[name];\n};\n\nfunction flatArray(list) {\n  return list.reduce(function (a, b) {\n    return a.concat(isArray(b) ? flatArray(b) : b);\n  }, []);\n}\n\nvar isPrimitive = function isPrimitive(value) {\n  return isNullOrUndefined(value) || !isObjectType(value);\n};\n\nvar getPath = function getPath(path, values) {\n  var getInnerPath = function getInnerPath(value, key, isObject) {\n    var pathWithIndex = isObject ? \"\".concat(path, \".\").concat(key) : \"\".concat(path, \"[\").concat(key, \"]\");\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return isArray(values) ? values.map(function (value, key) {\n    return getInnerPath(value, key);\n  }) : Object.entries(values).map(function (_ref23) {\n    var _ref24 = _slicedToArray(_ref23, 2),\n        key = _ref24[0],\n        value = _ref24[1];\n\n    return getInnerPath(value, key, true);\n  });\n};\n\nvar getPath$1 = function getPath$1(parentPath, value) {\n  return flatArray(getPath(parentPath, value));\n};\n\nvar assignWatchFields = function assignWatchFields(fieldValues, fieldName, watchFields, combinedDefaultValues, watchFieldArray) {\n  var value;\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = watchFieldArray ? watchFieldArray : undefined;\n  } else if (!isUndefined(fieldValues[fieldName])) {\n    value = fieldValues[fieldName];\n    watchFields.add(fieldName);\n  } else {\n    value = get(transformToNestObject(fieldValues), fieldName);\n\n    if (isArray(watchFieldArray) && isArray(value) && value.length !== watchFieldArray.length) {\n      value = watchFieldArray;\n    }\n\n    if (!isUndefined(value)) {\n      getPath$1(fieldName, value).forEach(function (name) {\n        return watchFields.add(name);\n      });\n    }\n  }\n\n  return isUndefined(value) ? isObject(combinedDefaultValues) ? getDefaultValue(combinedDefaultValues, fieldName) : combinedDefaultValues : value;\n};\n\nvar skipValidation = function skipValidation(_ref25) {\n  var hasError = _ref25.hasError,\n      isBlurEvent = _ref25.isBlurEvent,\n      isOnSubmit = _ref25.isOnSubmit,\n      isReValidateOnSubmit = _ref25.isReValidateOnSubmit,\n      isOnBlur = _ref25.isOnBlur,\n      isReValidateOnBlur = _ref25.isReValidateOnBlur,\n      isSubmitted = _ref25.isSubmitted;\n  return isOnSubmit && isReValidateOnSubmit || isOnSubmit && !isSubmitted || isOnBlur && !isBlurEvent && !hasError || isReValidateOnBlur && !isBlurEvent && hasError || isReValidateOnSubmit && isSubmitted;\n};\n\nvar getFieldValueByName = function getFieldValueByName(fields, name) {\n  var results = transformToNestObject(getFieldsValues(fields));\n  return name ? get(results, name, results) : results;\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\n  var isMatch = false;\n\n  if (!isArray(referenceArray) || !isArray(differenceArray) || referenceArray.length !== differenceArray.length) {\n    return true;\n  }\n\n  for (var i = 0; i < referenceArray.length; i++) {\n    if (isMatch) {\n      break;\n    }\n\n    var dataA = referenceArray[i];\n    var dataB = differenceArray[i];\n\n    if (isUndefined(dataB) || Object.keys(dataA).length !== Object.keys(dataB).length) {\n      isMatch = true;\n      break;\n    }\n\n    for (var key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        isMatch = true;\n        break;\n      }\n    }\n  }\n\n  return isMatch;\n}\n\nvar isMatchFieldArrayName = function isMatchFieldArrayName(name, searchName) {\n  return name.startsWith(\"\".concat(searchName, \"[\"));\n};\n\nvar isNameInFieldArray = function isNameInFieldArray(names, name) {\n  return _toConsumableArray(names).reduce(function (prev, current) {\n    return isMatchFieldArrayName(name, current) ? true : prev;\n  }, false);\n};\n\nvar isFileListObject = function isFileListObject(data) {\n  return typeof FileList !== UNDEFINED && data instanceof FileList;\n};\n\nfunction onDomRemove(element, onDetachCallback) {\n  var observer = new MutationObserver(function () {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\nfunction baseGet(object, path) {\n  var updatePath = isKey(path) ? [path] : castPath(path);\n  var length = path.length;\n  var index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return index == length ? object : undefined;\n}\n\nfunction baseSlice(array, start, end) {\n  var index = -1;\n  var length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  end = end > length ? length : end;\n\n  if (end < 0) {\n    end += length;\n  }\n\n  length = start > end ? 0 : end - start;\n  var result = Array(length);\n\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n\n  return result;\n}\n\nfunction parent(object, path) {\n  return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nfunction baseUnset(object, path) {\n  var updatePath = isKey(path) ? [path] : castPath(path);\n  object = parent(object, updatePath);\n  var key = updatePath[updatePath.length - 1];\n  return !(object != null) || delete object[key];\n}\n\nfunction unset(object, paths) {\n  paths.forEach(function (path) {\n    baseUnset(object, path);\n  });\n  return object;\n}\n\nvar modeChecker = function modeChecker(mode) {\n  return {\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange\n  };\n};\n\nvar useRef = React.useRef,\n    useState = React.useState,\n    useCallback = React.useCallback,\n    useEffect = React.useEffect;\n\nfunction useForm() {\n  var _ref26 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref26$mode = _ref26.mode,\n      mode = _ref26$mode === void 0 ? VALIDATION_MODE.onSubmit : _ref26$mode,\n      _ref26$reValidateMode = _ref26.reValidateMode,\n      reValidateMode = _ref26$reValidateMode === void 0 ? VALIDATION_MODE.onChange : _ref26$reValidateMode,\n      validationSchema = _ref26.validationSchema,\n      validationResolver = _ref26.validationResolver,\n      validationContext = _ref26.validationContext,\n      _ref26$defaultValues = _ref26.defaultValues,\n      defaultValues = _ref26$defaultValues === void 0 ? {} : _ref26$defaultValues,\n      _ref26$submitFocusErr = _ref26.submitFocusError,\n      submitFocusError = _ref26$submitFocusErr === void 0 ? true : _ref26$submitFocusErr,\n      validateCriteriaMode = _ref26.validateCriteriaMode;\n\n  var fieldsRef = useRef({});\n  var validateAllFieldCriteria = validateCriteriaMode === 'all';\n  var errorsRef = useRef({});\n  var touchedFieldsRef = useRef({});\n  var watchFieldArrayRef = useRef({});\n  var watchFieldsRef = useRef(new Set());\n  var dirtyFieldsRef = useRef(new Set());\n  var fieldsWithValidationRef = useRef(new Set());\n  var validFieldsRef = useRef(new Set());\n  var isValidRef = useRef(true);\n  var defaultRenderValuesRef = useRef({});\n  var defaultValuesRef = useRef(defaultValues);\n  var isUnMount = useRef(false);\n  var isWatchAllRef = useRef(false);\n  var isSubmittedRef = useRef(false);\n  var isDirtyRef = useRef(false);\n  var submitCountRef = useRef(0);\n  var isSubmittingRef = useRef(false);\n  var handleChangeRef = useRef();\n  var resetFieldArrayFunctionRef = useRef({});\n  var fieldArrayNamesRef = useRef(new Set());\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      render = _useState2[1];\n\n  var _useRef$current = useRef(modeChecker(mode)).current,\n      isOnBlur = _useRef$current.isOnBlur,\n      isOnSubmit = _useRef$current.isOnSubmit;\n  var isWindowUndefined = typeof window === UNDEFINED;\n  var shouldValidateCallback = !!(validationSchema || validationResolver);\n  var isWeb = typeof document !== UNDEFINED && !isWindowUndefined && !isUndefined(window.HTMLElement);\n  var isProxyEnabled = isWeb && 'Proxy' in window;\n  var readFormStateRef = useRef({\n    dirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled\n  });\n  var _useRef$current2 = useRef(modeChecker(reValidateMode)).current,\n      isReValidateOnBlur = _useRef$current2.isOnBlur,\n      isReValidateOnSubmit = _useRef$current2.isOnSubmit;\n  var reRender = useCallback(function () {\n    if (!isUnMount.current) {\n      render({});\n    }\n  }, []);\n  var shouldRenderBaseOnError = useCallback(function (name, error, shouldRender, skipReRender) {\n    var shouldReRender = shouldRender || shouldUpdateWithError({\n      errors: errorsRef.current,\n      error: error,\n      name: name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n\n    if (isEmptyObject(error)) {\n      if (fieldsWithValidationRef.current.has(name) || shouldValidateCallback) {\n        validFieldsRef.current.add(name);\n        shouldReRender = shouldReRender || get(errorsRef.current, name);\n      }\n\n      errorsRef.current = unset(errorsRef.current, [name]);\n    } else {\n      validFieldsRef.current.delete(name);\n      shouldReRender = shouldReRender || !get(errorsRef.current, name);\n      set(errorsRef.current, name, error[name]);\n    }\n\n    if (shouldReRender && !skipReRender) {\n      reRender();\n      return true;\n    }\n  }, [reRender, shouldValidateCallback]);\n  var setFieldValue = useCallback(function (name, rawValue) {\n    var field = fieldsRef.current[name];\n\n    if (!field) {\n      return false;\n    }\n\n    var ref = field.ref;\n    var options = field.options;\n    var type = ref.type;\n    var value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n\n    if (isRadioInput(ref) && options) {\n      options.forEach(function (_ref27) {\n        var radioRef = _ref27.ref;\n        return radioRef.checked = radioRef.value === value;\n      });\n    } else if (isFileInput(ref)) {\n      if (isEmptyString(value) || isFileListObject(value)) {\n        ref.files = value;\n      } else {\n        ref.value = value;\n      }\n    } else if (isMultipleSelect(ref)) {\n      _toConsumableArray(ref.options).forEach(function (selectRef) {\n        return selectRef.selected = value.includes(selectRef.value);\n      });\n    } else if (isCheckBoxInput(ref) && options) {\n      options.length > 1 ? options.forEach(function (_ref28) {\n        var checkboxRef = _ref28.ref;\n        return checkboxRef.checked = value.includes(checkboxRef.value);\n      }) : options[0].ref.checked = !!value;\n    } else {\n      ref.value = value;\n    }\n\n    return !!type;\n  }, [isWeb]);\n\n  var setDirty = function setDirty(name) {\n    if (!fieldsRef.current[name] || !readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields) {\n      return false;\n    }\n\n    var isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    var previousDirtyFieldsLength = dirtyFieldsRef.current.size;\n    var isDirty = defaultRenderValuesRef.current[name] !== getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\n\n    if (isFieldArray) {\n      var fieldArrayName = name.substring(0, name.indexOf('['));\n      isDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\n    }\n\n    var isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !== isDirty;\n\n    if (isDirty) {\n      dirtyFieldsRef.current.add(name);\n    } else {\n      dirtyFieldsRef.current.delete(name);\n    }\n\n    isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;\n    return readFormStateRef.current.dirty ? isDirtyChanged : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\n  };\n\n  var setInternalValue = useCallback(function (name, value) {\n    setFieldValue(name, value);\n\n    if (setDirty(name) || !get(touchedFieldsRef.current, name) && readFormStateRef.current.touched) {\n      return !!set(touchedFieldsRef.current, name, true);\n    }\n  }, [setFieldValue]);\n  var executeValidation = useCallback(\n  /*#__PURE__*/\n  function () {\n    var _ref29 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(name, skipReRender) {\n      var field, error;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              field = fieldsRef.current[name];\n\n              if (field) {\n                _context3.next = 3;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", false);\n\n            case 3:\n              _context3.next = 5;\n              return validateField(fieldsRef, validateAllFieldCriteria, field);\n\n            case 5:\n              error = _context3.sent;\n              shouldRenderBaseOnError(name, error, false, skipReRender);\n              return _context3.abrupt(\"return\", isEmptyObject(error));\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x12, _x13) {\n      return _ref29.apply(this, arguments);\n    };\n  }(), [shouldRenderBaseOnError, validateAllFieldCriteria]);\n  var executeSchemaValidation = useCallback(\n  /*#__PURE__*/\n  function () {\n    var _ref30 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4(payload) {\n      var _ref31, errors, previousFormIsValid;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContext);\n\n            case 2:\n              _ref31 = _context4.sent;\n              errors = _ref31.errors;\n              previousFormIsValid = isValidRef.current;\n              isValidRef.current = isEmptyObject(errors);\n\n              if (isArray(payload)) {\n                payload.forEach(function (name) {\n                  var error = get(errors, name);\n\n                  if (error) {\n                    set(errorsRef.current, name, error);\n                  } else {\n                    unset(errorsRef.current, [name]);\n                  }\n                });\n                reRender();\n              } else {\n                shouldRenderBaseOnError(payload, get(errors, payload) ? _defineProperty({}, payload, get(errors, payload)) : {}, previousFormIsValid !== isValidRef.current);\n              }\n\n              return _context4.abrupt(\"return\", isEmptyObject(errorsRef.current));\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x14) {\n      return _ref30.apply(this, arguments);\n    };\n  }(), [reRender, shouldRenderBaseOnError, validateAllFieldCriteria, validationContext, validationResolver, validationSchema]);\n  var triggerValidation = useCallback(\n  /*#__PURE__*/\n  function () {\n    var _ref33 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6(payload) {\n      var fields, result;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              fields = payload || Object.keys(fieldsRef.current);\n\n              if (!shouldValidateCallback) {\n                _context6.next = 3;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", executeSchemaValidation(fields));\n\n            case 3:\n              if (!isArray(fields)) {\n                _context6.next = 9;\n                break;\n              }\n\n              _context6.next = 6;\n              return Promise.all(fields.map(\n              /*#__PURE__*/\n              function () {\n                var _ref34 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee5(data) {\n                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return executeValidation(data, true);\n\n                        case 2:\n                          return _context5.abrupt(\"return\", _context5.sent);\n\n                        case 3:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }));\n\n                return function (_x16) {\n                  return _ref34.apply(this, arguments);\n                };\n              }()));\n\n            case 6:\n              result = _context6.sent;\n              reRender();\n              return _context6.abrupt(\"return\", result.every(Boolean));\n\n            case 9:\n              _context6.next = 11;\n              return executeValidation(fields);\n\n            case 11:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 12:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x15) {\n      return _ref33.apply(this, arguments);\n    };\n  }(), [executeSchemaValidation, executeValidation, reRender, shouldValidateCallback]);\n\n  var isFieldWatched = function isFieldWatched(name) {\n    return isWatchAllRef.current || watchFieldsRef.current.has(name) || !isKey(name) && fieldArrayNamesRef.current.has((name.match(/\\w+/) || [])[0]);\n  };\n\n  var setValue = useCallback(function (name, value, shouldValidate) {\n    var shouldRender = setInternalValue(name, value) || isFieldWatched(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (shouldValidate) {\n      triggerValidation(name);\n    }\n\n    return;\n  }, [reRender, setInternalValue, triggerValidation]);\n  handleChangeRef.current = handleChangeRef.current ? handleChangeRef.current :\n  /*#__PURE__*/\n  function () {\n    var _ref36 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7(_ref35) {\n      var type, target, name, fields, errors, field, currentError, error, isBlurEvent, shouldSkipValidation, shouldUpdateDirty, shouldUpdateState, _ref37, _errors, previousFormIsValid;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              type = _ref35.type, target = _ref35.target;\n              name = target ? target.name : '';\n              fields = fieldsRef.current;\n              errors = errorsRef.current;\n              field = fields[name];\n              currentError = get(errors, name);\n\n              if (field) {\n                _context7.next = 8;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 8:\n              isBlurEvent = type === EVENTS.BLUR;\n              shouldSkipValidation = skipValidation({\n                hasError: !!currentError,\n                isBlurEvent: isBlurEvent,\n                isOnSubmit: isOnSubmit,\n                isReValidateOnSubmit: isReValidateOnSubmit,\n                isOnBlur: isOnBlur,\n                isReValidateOnBlur: isReValidateOnBlur,\n                isSubmitted: isSubmittedRef.current\n              });\n              shouldUpdateDirty = setDirty(name);\n              shouldUpdateState = isFieldWatched(name) || shouldUpdateDirty;\n\n              if (isBlurEvent && !get(touchedFieldsRef.current, name) && readFormStateRef.current.touched) {\n                set(touchedFieldsRef.current, name, true);\n                shouldUpdateState = true;\n              }\n\n              if (!shouldSkipValidation) {\n                _context7.next = 15;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", shouldUpdateState && reRender());\n\n            case 15:\n              if (!shouldValidateCallback) {\n                _context7.next = 26;\n                break;\n              }\n\n              _context7.next = 18;\n              return validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContext);\n\n            case 18:\n              _ref37 = _context7.sent;\n              _errors = _ref37.errors;\n              previousFormIsValid = isValidRef.current;\n              isValidRef.current = isEmptyObject(_errors);\n              error = get(_errors, name) ? _defineProperty({}, name, get(_errors, name)) : {};\n\n              if (previousFormIsValid !== isValidRef.current) {\n                shouldUpdateState = true;\n              }\n\n              _context7.next = 29;\n              break;\n\n            case 26:\n              _context7.next = 28;\n              return validateField(fieldsRef, validateAllFieldCriteria, field);\n\n            case 28:\n              error = _context7.sent;\n\n            case 29:\n              if (!shouldRenderBaseOnError(name, error) && shouldUpdateState) {\n                reRender();\n              }\n\n            case 30:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function (_x17) {\n      return _ref36.apply(this, arguments);\n    };\n  }();\n  var validateSchemaIsValid = useCallback(function () {\n    var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var fieldValues = isEmptyObject(defaultValuesRef.current) ? getFieldsValues(fieldsRef.current) : defaultValuesRef.current;\n    validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContext).then(function (_ref39) {\n      var errors = _ref39.errors;\n      var previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [reRender, validateAllFieldCriteria, validationContext, validationResolver]);\n\n  var removeFieldEventListener = function removeFieldEventListener(field, forceDelete) {\n    if (!isUndefined(handleChangeRef.current) && field) {\n      findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\n    }\n  };\n\n  var removeFieldEventListenerAndRef = useCallback(function (field, forceDelete) {\n    if (!field || field && isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) && !forceDelete) {\n      return;\n    }\n\n    removeFieldEventListener(field, forceDelete);\n    var name = field.ref.name;\n    errorsRef.current = unset(errorsRef.current, [name]);\n    touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\n    defaultRenderValuesRef.current = unset(defaultRenderValuesRef.current, [name]);\n    [dirtyFieldsRef, fieldsWithValidationRef, validFieldsRef, watchFieldsRef].forEach(function (data) {\n      return data.current.delete(name);\n    });\n\n    if (readFormStateRef.current.isValid || readFormStateRef.current.touched) {\n      reRender();\n\n      if (shouldValidateCallback) {\n        validateSchemaIsValid();\n      }\n    }\n  }, [reRender, shouldValidateCallback, validateSchemaIsValid]);\n\n  function clearError(name) {\n    if (isUndefined(name)) {\n      errorsRef.current = {};\n    } else {\n      unset(errorsRef.current, isArray(name) ? name : [name]);\n    }\n\n    reRender();\n  }\n\n  var setInternalError = function setInternalError(_ref40) {\n    var name = _ref40.name,\n        type = _ref40.type,\n        types = _ref40.types,\n        message = _ref40.message,\n        preventRender = _ref40.preventRender;\n    var field = fieldsRef.current[name];\n\n    if (!isSameError(errorsRef.current[name], {\n      type: type,\n      message: message,\n      types: types\n    })) {\n      set(errorsRef.current, name, {\n        type: type,\n        types: types,\n        message: message,\n        ref: field ? field.ref : {},\n        isManual: true\n      });\n\n      if (!preventRender) {\n        reRender();\n      }\n    }\n  };\n\n  function setError(name) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var message = arguments.length > 2 ? arguments[2] : undefined;\n\n    if (isString(name)) {\n      setInternalError(Object.assign({\n        name: name\n      }, isObject(type) ? {\n        types: type,\n        type: ''\n      } : {\n        type: type,\n        message: message\n      }));\n    } else if (isArray(name)) {\n      name.forEach(function (error) {\n        return setInternalError(Object.assign(Object.assign({}, error), {\n          preventRender: true\n        }));\n      });\n      reRender();\n    }\n  }\n\n  function watch(fieldNames, defaultValue) {\n    var combinedDefaultValues = isUndefined(defaultValue) ? isUndefined(defaultValuesRef.current) ? {} : defaultValuesRef.current : defaultValue;\n    var fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\n    var watchFields = watchFieldsRef.current;\n\n    if (isProxyEnabled) {\n      readFormStateRef.current.dirty = true;\n    }\n\n    if (isString(fieldNames)) {\n      return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues, fieldArrayNamesRef.current.has(fieldNames) ? watchFieldArrayRef.current[fieldNames] : undefined);\n    }\n\n    if (isArray(fieldNames)) {\n      return fieldNames.reduce(function (previous, name) {\n        var value;\n\n        if (isEmptyObject(fieldsRef.current) && isObject(combinedDefaultValues)) {\n          value = getDefaultValue(combinedDefaultValues, name);\n        } else {\n          value = assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues);\n        }\n\n        return Object.assign(Object.assign({}, previous), _defineProperty({}, name, value));\n      }, {});\n    }\n\n    isWatchAllRef.current = true;\n    var result = !isEmptyObject(fieldValues) && fieldValues || defaultValue || defaultValuesRef.current;\n    return fieldNames && fieldNames.nest ? transformToNestObject(result) : result;\n  }\n\n  function unregister(names) {\n    if (!isEmptyObject(fieldsRef.current)) {\n      (isArray(names) ? names : [names]).forEach(function (fieldName) {\n        return removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n      });\n    }\n  }\n\n  function registerFieldsRef(ref) {\n    var validateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!ref.name) {\n      // eslint-disable-next-line no-console\n      return console.warn('Missing name @', ref);\n    }\n\n    var name = ref.name,\n        type = ref.type,\n        value = ref.value;\n    var fieldAttributes = Object.assign({\n      ref: ref\n    }, validateOptions);\n    var fields = fieldsRef.current;\n    var isRadioOrCheckbox = isRadioInput(ref) || isCheckBoxInput(ref);\n    var currentField = fields[name];\n    var isEmptyDefaultValue = true;\n    var isFieldArray = false;\n    var defaultValue;\n\n    if (isRadioOrCheckbox ? currentField && isArray(currentField.options) && currentField.options.find(function (_ref41) {\n      var ref = _ref41.ref;\n      return value === ref.value;\n    }) : currentField) {\n      fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\n      return;\n    }\n\n    if (type) {\n      var mutationWatcher = onDomRemove(ref, function () {\n        return removeFieldEventListenerAndRef(fieldAttributes);\n      });\n      currentField = isRadioOrCheckbox ? Object.assign({\n        options: [].concat(_toConsumableArray(currentField && currentField.options || []), [{\n          ref: ref,\n          mutationWatcher: mutationWatcher\n        }]),\n        ref: {\n          type: type,\n          name: name\n        }\n      }, validateOptions) : Object.assign(Object.assign({}, fieldAttributes), {\n        mutationWatcher: mutationWatcher\n      });\n    } else {\n      currentField = fieldAttributes;\n    }\n\n    fields[name] = currentField;\n\n    if (!isEmptyObject(defaultValuesRef.current)) {\n      defaultValue = getDefaultValue(defaultValuesRef.current, name);\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (shouldValidateCallback && !isFieldArray && readFormStateRef.current.isValid) {\n      validateSchemaIsValid();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(fieldsRef, validateAllFieldCriteria, currentField).then(function (error) {\n          var previousFormIsValid = isValidRef.current;\n\n          if (isEmptyObject(error)) {\n            validFieldsRef.current.add(name);\n          } else {\n            isValidRef.current = false;\n          }\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (!defaultRenderValuesRef.current[name] && !(isFieldArray && isEmptyDefaultValue)) {\n      defaultRenderValuesRef.current[name] = isEmptyDefaultValue ? getFieldValue(fields, currentField.ref) : defaultValue;\n    }\n\n    if (!type) {\n      return;\n    }\n\n    var fieldToAttachListener = isRadioOrCheckbox && currentField.options ? currentField.options[currentField.options.length - 1] : currentField;\n    attachEventListeners({\n      field: fieldToAttachListener,\n      isRadioOrCheckbox: isRadioOrCheckbox,\n      handleChange: handleChangeRef.current\n    });\n  }\n\n  function register(refOrValidationOptions, validationOptions) {\n    if (isWindowUndefined) {\n      return;\n    }\n\n    if (isString(refOrValidationOptions)) {\n      registerFieldsRef({\n        name: refOrValidationOptions\n      }, validationOptions);\n      return;\n    }\n\n    if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\n      registerFieldsRef(refOrValidationOptions, validationOptions);\n      return;\n    }\n\n    return function (ref) {\n      return ref && registerFieldsRef(ref, refOrValidationOptions);\n    };\n  }\n\n  var handleSubmit = useCallback(function (callback) {\n    return (\n      /*#__PURE__*/\n      function () {\n        var _ref42 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee9(e) {\n          var fieldErrors, fieldValues, fields, _ref43, errors, values, _ref44, _errors2, _values;\n\n          return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n            while (1) {\n              switch (_context9.prev = _context9.next) {\n                case 0:\n                  if (e) {\n                    e.preventDefault();\n                    e.persist();\n                  }\n\n                  fields = fieldsRef.current;\n\n                  if (readFormStateRef.current.isSubmitting) {\n                    isSubmittingRef.current = true;\n                    reRender();\n                  }\n\n                  _context9.prev = 3;\n\n                  if (!shouldValidateCallback) {\n                    _context9.next = 16;\n                    break;\n                  }\n\n                  fieldValues = getFieldsValues(fields);\n                  _context9.next = 8;\n                  return validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContext);\n\n                case 8:\n                  _ref43 = _context9.sent;\n                  errors = _ref43.errors;\n                  values = _ref43.values;\n                  errorsRef.current = errors;\n                  fieldErrors = errors;\n                  fieldValues = values;\n                  _context9.next = 23;\n                  break;\n\n                case 16:\n                  _context9.next = 18;\n                  return Object.values(fields).reduce(\n                  /*#__PURE__*/\n                  function () {\n                    var _ref45 = _asyncToGenerator(\n                    /*#__PURE__*/\n                    _regeneratorRuntime.mark(function _callee8(previous, field) {\n                      var resolvedPrevious, ref, name, fieldError;\n                      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                        while (1) {\n                          switch (_context8.prev = _context8.next) {\n                            case 0:\n                              if (field) {\n                                _context8.next = 2;\n                                break;\n                              }\n\n                              return _context8.abrupt(\"return\", previous);\n\n                            case 2:\n                              _context8.next = 4;\n                              return previous;\n\n                            case 4:\n                              resolvedPrevious = _context8.sent;\n                              ref = field.ref, name = field.ref.name;\n\n                              if (fields[name]) {\n                                _context8.next = 8;\n                                break;\n                              }\n\n                              return _context8.abrupt(\"return\", Promise.resolve(resolvedPrevious));\n\n                            case 8:\n                              _context8.next = 10;\n                              return validateField(fieldsRef, validateAllFieldCriteria, field);\n\n                            case 10:\n                              fieldError = _context8.sent;\n\n                              if (!fieldError[name]) {\n                                _context8.next = 15;\n                                break;\n                              }\n\n                              set(resolvedPrevious.errors, name, fieldError[name]);\n                              validFieldsRef.current.delete(name);\n                              return _context8.abrupt(\"return\", Promise.resolve(resolvedPrevious));\n\n                            case 15:\n                              if (fieldsWithValidationRef.current.has(name)) {\n                                validFieldsRef.current.add(name);\n                              }\n\n                              resolvedPrevious.values[name] = getFieldValue(fields, ref);\n                              return _context8.abrupt(\"return\", Promise.resolve(resolvedPrevious));\n\n                            case 18:\n                            case \"end\":\n                              return _context8.stop();\n                          }\n                        }\n                      }, _callee8);\n                    }));\n\n                    return function (_x19, _x20) {\n                      return _ref45.apply(this, arguments);\n                    };\n                  }(), Promise.resolve({\n                    errors: {},\n                    values: {}\n                  }));\n\n                case 18:\n                  _ref44 = _context9.sent;\n                  _errors2 = _ref44.errors;\n                  _values = _ref44.values;\n                  fieldErrors = _errors2;\n                  fieldValues = _values;\n\n                case 23:\n                  if (!isEmptyObject(fieldErrors)) {\n                    _context9.next = 29;\n                    break;\n                  }\n\n                  errorsRef.current = {};\n                  _context9.next = 27;\n                  return callback(transformToNestObject(fieldValues), e);\n\n                case 27:\n                  _context9.next = 31;\n                  break;\n\n                case 29:\n                  if (submitFocusError && isWeb) {\n                    focusErrorField(fields, fieldErrors);\n                  }\n\n                  errorsRef.current = fieldErrors;\n\n                case 31:\n                  _context9.prev = 31;\n                  isSubmittedRef.current = true;\n                  isSubmittingRef.current = false;\n                  submitCountRef.current = submitCountRef.current + 1;\n                  reRender();\n                  return _context9.finish(31);\n\n                case 37:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }\n          }, _callee9, null, [[3,, 31, 37]]);\n        }));\n\n        return function (_x18) {\n          return _ref42.apply(this, arguments);\n        };\n      }()\n    );\n  }, [isWeb, reRender, shouldValidateCallback, submitFocusError, validateAllFieldCriteria, validationContext, validationResolver, validationSchema]);\n\n  var resetRefs = function resetRefs() {\n    errorsRef.current = {};\n    fieldsRef.current = {};\n    touchedFieldsRef.current = {};\n    validFieldsRef.current = new Set();\n    fieldsWithValidationRef.current = new Set();\n    defaultRenderValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    dirtyFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n    isSubmittedRef.current = false;\n    isDirtyRef.current = false;\n    isValidRef.current = true;\n    submitCountRef.current = 0;\n  };\n\n  var reset = function reset(values) {\n    if (isWeb) {\n      for (var _i = 0, _Object$values = Object.values(fieldsRef.current); _i < _Object$values.length; _i++) {\n        var value = _Object$values[_i];\n\n        if (value && isHTMLElement(value.ref) && value.ref.closest) {\n          try {\n            value.ref.closest('form').reset();\n            break;\n          } catch (_a) {}\n        }\n      }\n    }\n\n    if (values) {\n      defaultValuesRef.current = values;\n    }\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(function (resetFieldArray) {\n      return isFunction(resetFieldArray) && resetFieldArray();\n    });\n    resetRefs();\n    reRender();\n  };\n\n  var getValues = function getValues(payload) {\n    var fieldValues = getFieldsValues(fieldsRef.current);\n    return payload && payload.nest ? transformToNestObject(fieldValues) : fieldValues;\n  };\n\n  useEffect(function () {\n    return function () {\n      isUnMount.current = true;\n      fieldsRef.current && Object.values(fieldsRef.current).forEach(function (field) {\n        return removeFieldEventListenerAndRef(field, true);\n      });\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!shouldValidateCallback) {\n    isValidRef.current = validFieldsRef.current.size >= fieldsWithValidationRef.current.size && isEmptyObject(errorsRef.current);\n  }\n\n  var formState = {\n    dirty: isDirtyRef.current,\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit ? isSubmittedRef.current && isEmptyObject(errorsRef.current) : isValidRef.current\n  };\n  var control = Object.assign(Object.assign({\n    register: register,\n    unregister: unregister,\n    removeFieldEventListener: removeFieldEventListener,\n    getValues: getValues,\n    setValue: setValue,\n    triggerValidation: triggerValidation\n  }, shouldValidateCallback ? {\n    validateSchemaIsValid: validateSchemaIsValid\n  } : {}), {\n    formState: formState,\n    mode: {\n      isOnBlur: isOnBlur,\n      isOnSubmit: isOnSubmit\n    },\n    reValidateMode: {\n      isReValidateOnBlur: isReValidateOnBlur,\n      isReValidateOnSubmit: isReValidateOnSubmit\n    },\n    errorsRef: errorsRef,\n    touchedFieldsRef: touchedFieldsRef,\n    fieldsRef: fieldsRef,\n    resetFieldArrayFunctionRef: resetFieldArrayFunctionRef,\n    validFieldsRef: validFieldsRef,\n    fieldsWithValidationRef: fieldsWithValidationRef,\n    watchFieldArrayRef: watchFieldArrayRef,\n    fieldArrayNamesRef: fieldArrayNamesRef,\n    isDirtyRef: isDirtyRef,\n    readFormStateRef: readFormStateRef,\n    defaultValuesRef: defaultValuesRef\n  });\n  return {\n    watch: watch,\n    control: control,\n    handleSubmit: handleSubmit,\n    setValue: setValue,\n    triggerValidation: triggerValidation,\n    getValues: useCallback(getValues, []),\n    reset: useCallback(reset, []),\n    register: useCallback(register, [defaultValuesRef.current, defaultRenderValuesRef.current]),\n    unregister: useCallback(unregister, []),\n    clearError: useCallback(clearError, []),\n    setError: useCallback(setError, []),\n    errors: errorsRef.current,\n    formState: isProxyEnabled ? new Proxy(formState, {\n      get: function get(obj, prop) {\n        if (prop in obj) {\n          readFormStateRef.current[prop] = true;\n          return obj[prop];\n        }\n\n        return {};\n      }\n    }) : formState\n  };\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nvar FormGlobalContext = createContext(null);\n\nfunction useFormContext() {\n  return useContext(FormGlobalContext);\n}\n\nfunction FormContext(_a) {\n  var children = _a.children,\n      formState = _a.formState,\n      errors = _a.errors,\n      restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\n\n  return createElement(FormGlobalContext.Provider, {\n    value: Object.assign(Object.assign({}, restMethods), {\n      formState: formState,\n      errors: errors\n    })\n  }, children);\n}\n\nvar generateId = function generateId() {\n  var d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nvar appendId = function appendId(value, keyName) {\n  return Object.assign(Object.assign({}, isObject(value) ? value : {\n    value: value\n  }), _defineProperty({}, keyName, generateId()));\n};\n\nvar mapIds = function mapIds(data, keyName) {\n  return (isArray(data) ? data : []).map(function (value) {\n    return appendId(value, keyName);\n  });\n};\n\nvar removeArrayAt = function removeArrayAt(data, index) {\n  return isUndefined(index) ? [] : data.filter(function (_, i) {\n    return (isArray(index) ? index : [index]).indexOf(i) < 0;\n  });\n};\n\nvar moveArrayAt = function moveArrayAt(data, from, to) {\n  return isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n};\n\nvar swapArrayAt = function swapArrayAt(fields, indexA, indexB) {\n  var _ref46;\n\n  return isArray(fields) && (_ref46 = [fields[indexB], fields[indexA]], fields[indexA] = _ref46[0], fields[indexB] = _ref46[1], _ref46);\n};\n\nvar prependAt = function prependAt(data, value) {\n  return [].concat(_toConsumableArray(isArray(value) ? value : [value || null]), _toConsumableArray(data));\n};\n\nvar insertAt = function insertAt(data, index, value) {\n  return [].concat(_toConsumableArray(data.slice(0, index)), _toConsumableArray(isArray(value) ? value : [value || null]), _toConsumableArray(data.slice(index)));\n};\n\nvar fillEmptyArray = function fillEmptyArray(value) {\n  return isArray(value) ? Array(value.length).fill(null) : undefined;\n};\n\nvar useEffect$1 = React.useEffect,\n    useRef$1 = React.useRef,\n    useState$1 = React.useState;\n\nvar useFieldArray = function useFieldArray(_ref47) {\n  var control = _ref47.control,\n      name = _ref47.name,\n      _ref47$keyName = _ref47.keyName,\n      keyName = _ref47$keyName === void 0 ? 'id' : _ref47$keyName;\n  var methods = useFormContext();\n\n  var _ref48 = control || methods.control,\n      resetFieldArrayFunctionRef = _ref48.resetFieldArrayFunctionRef,\n      fieldArrayNamesRef = _ref48.fieldArrayNamesRef,\n      fieldsRef = _ref48.fieldsRef,\n      getValues = _ref48.getValues,\n      defaultValuesRef = _ref48.defaultValuesRef,\n      removeFieldEventListener = _ref48.removeFieldEventListener,\n      errorsRef = _ref48.errorsRef,\n      isDirtyRef = _ref48.isDirtyRef,\n      touchedFieldsRef = _ref48.touchedFieldsRef,\n      readFormStateRef = _ref48.readFormStateRef,\n      watchFieldArrayRef = _ref48.watchFieldArrayRef,\n      validFieldsRef = _ref48.validFieldsRef,\n      fieldsWithValidationRef = _ref48.fieldsWithValidationRef,\n      validateSchemaIsValid = _ref48.validateSchemaIsValid;\n\n  var memoizedDefaultValues = useRef$1(get(defaultValuesRef.current, name, []));\n\n  var _useState$ = useState$1(mapIds(memoizedDefaultValues.current, keyName)),\n      _useState$2 = _slicedToArray(_useState$, 2),\n      fields = _useState$2[0],\n      setField = _useState$2[1];\n\n  var appendValueWithKey = function appendValueWithKey(value) {\n    return value.map(function (v) {\n      return appendId(v, keyName);\n    });\n  };\n\n  var commonTasks = function commonTasks(fieldsValues) {\n    watchFieldArrayRef.current[name] = fieldsValues;\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid(_defineProperty({}, name, fieldsValues));\n    }\n  };\n\n  var resetFields = function resetFields(flagOrFields) {\n    if (readFormStateRef.current.dirty) {\n      isDirtyRef.current = isUndefined(flagOrFields) ? true : getIsFieldsDifferent(flagOrFields, memoizedDefaultValues.current);\n    }\n\n    for (var key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key], true);\n      }\n    }\n  };\n\n  var mapCurrentFieldsValueWithState = function mapCurrentFieldsValueWithState() {\n    var currentFieldsValue = getValues({\n      nest: true\n    })[name];\n\n    if (isArray(currentFieldsValue)) {\n      for (var i = 0; i < currentFieldsValue.length; i++) {\n        fields[i] = Object.assign(Object.assign({}, fields[i]), currentFieldsValue[i]);\n      }\n    }\n  };\n\n  var append = function append(value) {\n    mapCurrentFieldsValueWithState();\n\n    if (readFormStateRef.current.dirty) {\n      isDirtyRef.current = true;\n    }\n\n    commonTasks([].concat(_toConsumableArray(fields), _toConsumableArray(isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)])));\n  };\n\n  var prepend = function prepend(value) {\n    mapCurrentFieldsValueWithState();\n    resetFields();\n    commonTasks(prependAt(fields, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = prependAt(errorsRef.current[name], fillEmptyArray(value));\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prependAt(touchedFieldsRef.current[name], fillEmptyArray(value));\n    }\n  };\n\n  var remove = function remove(index) {\n    if (!isUndefined(index)) {\n      mapCurrentFieldsValueWithState();\n    }\n\n    resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\n    commonTasks(removeArrayAt(fields, index));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      fields.forEach(function (field, fieldIndex) {\n        if (isUndefined(index) || fieldIndex === index || isArray(index) && index.indexOf(fieldIndex) >= 0) {\n          for (var key in field) {\n            var removeFieldName = \"\".concat(name, \"[\").concat(index, \"].\").concat(key);\n            validFieldsRef.current.delete(removeFieldName);\n            fieldsWithValidationRef.current.delete(removeFieldName);\n          }\n        }\n      });\n    }\n  };\n\n  var insert = function insert(index, value) {\n    mapCurrentFieldsValueWithState();\n    resetFields(insertAt(getFieldValueByName(fieldsRef.current, name), index));\n    commonTasks(insertAt(fields, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = insertAt(errorsRef.current[name], index, fillEmptyArray(value));\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insertAt(touchedFieldsRef.current[name], index, fillEmptyArray(value));\n    }\n  };\n\n  var swap = function swap(indexA, indexB) {\n    mapCurrentFieldsValueWithState();\n    var fieldValues = getFieldValueByName(fieldsRef.current, name);\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    swapArrayAt(fields, indexA, indexB);\n    commonTasks(_toConsumableArray(fields));\n\n    if (errorsRef.current[name]) {\n      swapArrayAt(errorsRef.current[name], indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n    }\n  };\n\n  var move = function move(from, to) {\n    mapCurrentFieldsValueWithState();\n    var fieldValues = getFieldValueByName(fieldsRef.current, name);\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    moveArrayAt(fields, from, to);\n    commonTasks(_toConsumableArray(fields));\n\n    if (errorsRef.current[name]) {\n      moveArrayAt(errorsRef.current[name], from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n    }\n  };\n\n  var reset = function reset() {\n    resetFields();\n    memoizedDefaultValues.current = get(defaultValuesRef.current, name, []);\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  useEffect$1(function () {\n    var resetFunctions = resetFieldArrayFunctionRef.current;\n    var fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n    watchFieldArrayRef.current[name] = {};\n    return function () {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return {\n    swap: swap,\n    move: move,\n    prepend: prepend,\n    append: append,\n    remove: remove,\n    insert: insert,\n    fields: fields\n  };\n};\n\nvar getInputValue = function getInputValue(target, isCheckbox) {\n  if (isNullOrUndefined(target)) {\n    return target;\n  }\n\n  return isCheckbox ? isUndefined(target.checked) ? target : target.checked : isUndefined(target.value) ? target : target.value;\n};\n\nvar Controller = function Controller(_a) {\n  var name = _a.name,\n      rules = _a.rules,\n      InnerComponent = _a.as,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      _a$onChangeName = _a.onChangeName,\n      onChangeName = _a$onChangeName === void 0 ? VALIDATION_MODE.onChange : _a$onChangeName,\n      _a$onBlurName = _a.onBlurName,\n      onBlurName = _a$onBlurName === void 0 ? VALIDATION_MODE.onBlur : _a$onBlurName,\n      valueName = _a.valueName,\n      defaultValue = _a.defaultValue,\n      control = _a.control,\n      rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\"]);\n\n  var methods = useFormContext();\n\n  var _ref49 = control || methods.control,\n      defaultValuesRef = _ref49.defaultValuesRef,\n      setValue = _ref49.setValue,\n      register = _ref49.register,\n      unregister = _ref49.unregister,\n      errorsRef = _ref49.errorsRef,\n      removeFieldEventListener = _ref49.removeFieldEventListener,\n      triggerValidation = _ref49.triggerValidation,\n      _ref49$mode = _ref49.mode,\n      isOnSubmit = _ref49$mode.isOnSubmit,\n      isOnBlur = _ref49$mode.isOnBlur,\n      _ref49$reValidateMode = _ref49.reValidateMode,\n      isReValidateOnBlur = _ref49$reValidateMode.isReValidateOnBlur,\n      isReValidateOnSubmit = _ref49$reValidateMode.isReValidateOnSubmit,\n      isSubmitted = _ref49.formState.isSubmitted,\n      fieldsRef = _ref49.fieldsRef,\n      fieldArrayNamesRef = _ref49.fieldArrayNamesRef;\n\n  var _useState$3 = useState$2(isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue),\n      _useState$4 = _slicedToArray(_useState$3, 2),\n      value = _useState$4[0],\n      setInputStateValue = _useState$4[1];\n\n  var valueRef = useRef$2(value);\n  var isCheckboxInput = isBoolean(value);\n\n  var shouldValidate = function shouldValidate() {\n    return !skipValidation({\n      hasError: !!get(errorsRef.current, name),\n      isOnBlur: isOnBlur,\n      isOnSubmit: isOnSubmit,\n      isReValidateOnBlur: isReValidateOnBlur,\n      isReValidateOnSubmit: isReValidateOnSubmit,\n      isSubmitted: isSubmitted\n    });\n  };\n\n  var commonTask = function commonTask(target) {\n    var data = getInputValue(target, isCheckboxInput);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  var eventWrapper = function eventWrapper(event) {\n    return function () {\n      for (var _len = arguments.length, arg = new Array(_len), _key = 0; _key < _len; _key++) {\n        arg[_key] = arguments[_key];\n      }\n\n      return setValue(name, commonTask(event(arg)), shouldValidate());\n    };\n  };\n\n  var handleChange = function handleChange(e) {\n    var data = commonTask(e && e.target ? e.target : e);\n    setValue(name, data, shouldValidate());\n  };\n\n  var registerField = function registerField() {\n    if (isNameInFieldArray(fieldArrayNamesRef.current, name) && fieldsRef.current[name]) {\n      removeFieldEventListener(fieldsRef.current[name], true);\n    }\n\n    register(Object.defineProperty({\n      name: name\n    }, VALUE, {\n      set: function set(data) {\n        setInputStateValue(data);\n        valueRef.current = data;\n      },\n      get: function get() {\n        return valueRef.current;\n      }\n    }), Object.assign({}, rules));\n  };\n\n  if (!fieldsRef.current[name]) {\n    registerField();\n  }\n\n  useEffect$2(function () {\n    registerField();\n    return function () {\n      if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\n        unregister(name);\n      }\n    };\n  }, [name]);\n  var shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\n  var props = Object.assign(Object.assign(Object.assign(Object.assign({\n    name: name\n  }, rest), onChange ? _defineProperty({}, onChangeName, eventWrapper(onChange)) : _defineProperty({}, onChangeName, handleChange)), onBlur || shouldReValidateOnBlur ? _defineProperty({}, onBlurName, function () {\n    if (onBlur) {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      onBlur(args);\n    }\n\n    if (shouldReValidateOnBlur) {\n      triggerValidation(name);\n    }\n  }) : {}), _defineProperty({}, valueName || (isCheckboxInput ? 'checked' : VALUE), value));\n  return isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, Object.assign({}, props));\n};\n\nvar ErrorMessage = function ErrorMessage(_a) {\n  var InnerComponent = _a.as,\n      errors = _a.errors,\n      name = _a.name,\n      message = _a.message,\n      children = _a.children,\n      rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\n\n  var methods = useFormContext();\n  var error = get(errors || methods.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  var messageFromRegister = error.message,\n      types = error.types;\n  var props = Object.assign(Object.assign({}, InnerComponent ? rest : {}), {\n    children: children ? children({\n      message: messageFromRegister || message,\n      messages: types\n    }) : messageFromRegister || message\n  });\n  return InnerComponent ? isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, props) : createElement(Fragment, Object.assign({}, props));\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };","map":null,"metadata":{},"sourceType":"module"}