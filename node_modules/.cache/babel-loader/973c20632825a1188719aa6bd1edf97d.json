{"ast":null,"code":"import { STARTED_SUFFIX, SUCCESS_SUFFIX, FAILED_SUFFIX } from '../common/constants';\nimport { OpenDialogAction } from '../common/state/dialog/dialog.actions';\nimport { StopLoaderAction } from '../common/state/shared/shared.actions';\nexport default function createAsyncAction(type, fn, disableLoader) {\n  return (...args) => async (dispatch, getState) => {\n    // dispatch starting action\n    dispatch({\n      type: \"\".concat(type).concat(STARTED_SUFFIX),\n      payload: args\n    });\n    let result;\n\n    try {\n      // activate promise call back\n      result = await fn(...args, getState);\n    } catch (error) {\n      // dispatch fail action\n      dispatch({\n        type: \"\".concat(type).concat(FAILED_SUFFIX),\n        error: true,\n        payload: error\n      });\n      dispatch(new StopLoaderAction());\n      dispatch(new OpenDialogAction('error', error.message));\n      throw error;\n    } // dispatch success action\n\n\n    dispatch({\n      type: \"\".concat(type).concat(SUCCESS_SUFFIX),\n      payload: result\n    });\n    return result;\n  };\n}","map":{"version":3,"sources":["/Users/user/projects/react/react-starter/src/utils/createAsyncAction.js"],"names":["STARTED_SUFFIX","SUCCESS_SUFFIX","FAILED_SUFFIX","OpenDialogAction","StopLoaderAction","createAsyncAction","type","fn","disableLoader","args","dispatch","getState","payload","result","error","message"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,cAAzB,EAAyCC,aAAzC,QAA8D,qBAA9D;AACA,SAASC,gBAAT,QAAiC,uCAAjC;AACA,SAASC,gBAAT,QAAiC,uCAAjC;AAEA,eAAe,SAASC,iBAAT,CAA4BC,IAA5B,EAAkCC,EAAlC,EAAsCC,aAAtC,EAAqD;AAClE,SAAO,CAAC,GAAGC,IAAJ,KAAa,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAChD;AACAD,IAAAA,QAAQ,CAAC;AACPJ,MAAAA,IAAI,YAAKA,IAAL,SAAYN,cAAZ,CADG;AAEPY,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAIA,QAAII,MAAJ;;AACA,QAAI;AACF;AACAA,MAAAA,MAAM,GAAG,MAAMN,EAAE,CAAC,GAAGE,IAAJ,EAAUE,QAAV,CAAjB;AACD,KAHD,CAGE,OAAOG,KAAP,EAAc;AACd;AACAJ,MAAAA,QAAQ,CAAC;AACPJ,QAAAA,IAAI,YAAKA,IAAL,SAAYJ,aAAZ,CADG;AAEPY,QAAAA,KAAK,EAAE,IAFA;AAGPF,QAAAA,OAAO,EAAEE;AAHF,OAAD,CAAR;AAKAJ,MAAAA,QAAQ,CAAC,IAAIN,gBAAJ,EAAD,CAAR;AACAM,MAAAA,QAAQ,CAAC,IAAIP,gBAAJ,CAAqB,OAArB,EAA8BW,KAAK,CAACC,OAApC,CAAD,CAAR;AACA,YAAMD,KAAN;AACD,KApB+C,CAqBhD;;;AACAJ,IAAAA,QAAQ,CAAC;AACPJ,MAAAA,IAAI,YAAKA,IAAL,SAAYL,cAAZ,CADG;AAEPW,MAAAA,OAAO,EAAEC;AAFF,KAAD,CAAR;AAKA,WAAOA,MAAP;AACD,GA5BD;AA6BD","sourcesContent":["import { STARTED_SUFFIX, SUCCESS_SUFFIX, FAILED_SUFFIX } from '../common/constants';\nimport { OpenDialogAction } from '../common/state/dialog/dialog.actions';\nimport { StopLoaderAction } from '../common/state/shared/shared.actions';\n\nexport default function createAsyncAction (type, fn, disableLoader) {\n  return (...args) => async (dispatch, getState) => {\n    // dispatch starting action\n    dispatch({\n      type: `${type}${STARTED_SUFFIX}`,\n      payload: args\n    });\n    let result;\n    try {\n      // activate promise call back\n      result = await fn(...args, getState);\n    } catch (error) {\n      // dispatch fail action\n      dispatch({\n        type: `${type}${FAILED_SUFFIX}`,\n        error: true,\n        payload: error\n      });\n      dispatch(new StopLoaderAction());\n      dispatch(new OpenDialogAction('error', error.message));\n      throw error;\n    }\n    // dispatch success action\n    dispatch({\n      type: `${type}${SUCCESS_SUFFIX}`,\n      payload: result\n    });\n\n    return result;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}