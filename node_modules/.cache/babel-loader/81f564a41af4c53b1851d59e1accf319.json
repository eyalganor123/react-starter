{"ast":null,"code":"var _jsxFileName = \"/Users/user/react-starter/src/features/pages/app/app.page.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { withTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\nimport SpinnerComponent from '../../components/spinner/spinner.component.jsx';\nimport DialogComponent from '../../components/dialog/dialog.component.jsx';\nimport DrawerComponent from '../../components/drawer/drawer.component.jsx';\nimport { OpenDialogAction, CloseDialogAction } from '../../../common/state/dialog/dialog.actions';\nimport { ROUTES } from '../../../common/constants';\nimport { CloseDrawerAction } from '../../../common/state/drawer/drawer.actions';\nimport { ChangeLanguageAction, StartLoaderAction, StopLoaderAction, SetTitleAction } from '../../../common/state/shared/shared.actions';\nimport { FetchLoggedInUserAction } from '../../../common/state/auth/auth.actions';\n\nclass App extends Component {\n  componentDidMount() {\n    const _this$props = this.props,\n          history = _this$props.history,\n          location = _this$props.location,\n          setTitle = _this$props.setTitle;\n    this.initiateData(); // redirect to homepage if route is empty\n\n    if (location.pathname === ROUTES.empty) {\n      history.push(ROUTES.home);\n    } // set site title on route change\n\n\n    setTitle(ROUTES.home);\n    history.listen(path => setTitle(path.pathname));\n  }\n\n  onChangeLanguage(language) {\n    const changeLanguage = this.props.changeLanguage;\n    changeLanguage(language);\n  }\n\n  initiateData() {\n    const _this$props2 = this.props,\n          startLoader = _this$props2.startLoader,\n          stopLoader = _this$props2.stopLoader,\n          fetchLoggedInUser = _this$props2.fetchLoggedInUser,\n          openDialog = _this$props2.openDialog,\n          t = _this$props2.t;\n    startLoader();\n    fetchLoggedInUser().then(() => stopLoader()).then(() => openDialog(t('WELCOME_TITLE'), t('WELCOME_MESSAGE')));\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          isRtl = _this$props3.isRtl,\n          loading = _this$props3.loading,\n          children = _this$props3.children,\n          isDialogRender = _this$props3.isDialogRender,\n          dialogComponent = _this$props3.dialogComponent,\n          closeDrawer = _this$props3.closeDrawer,\n          languages = _this$props3.languages,\n          dialogTitle = _this$props3.dialogTitle,\n          dialogType = _this$props3.dialogType,\n          isDrawerRender = _this$props3.isDrawerRender,\n          closeDialog = _this$props3.closeDialog,\n          changeLanguage = _this$props3.changeLanguage,\n          language = _this$props3.language;\n    return React.createElement(\"div\", {\n      dir: isRtl ? 'rtl' : 'ltr',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, loading && React.createElement(SpinnerComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), children, React.createElement(DialogComponent, {\n      open: isDialogRender,\n      title: dialogTitle,\n      type: dialogType,\n      closeDialog: closeDialog,\n      component: dialogComponent || '',\n      isRtl: isRtl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(DrawerComponent, {\n      open: isDrawerRender,\n      languages: languages,\n      language: language,\n      closeDrawer: closeDrawer,\n      onChangeLanguage: changeLanguage,\n      isRtl: isRtl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }));\n  }\n\n}\n\nApp.propTypes = {\n  loading: PropTypes.bool,\n  children: PropTypes.element.isRequired,\n  isDialogRender: PropTypes.bool.isRequired,\n  dialogComponent: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\n  dialogTitle: PropTypes.string.isRequired,\n  dialogType: PropTypes.string,\n  isDrawerRender: PropTypes.bool.isRequired,\n  languages: PropTypes.shape({\n    [PropTypes.string]: PropTypes.string\n  }).isRequired,\n  language: PropTypes.string.isRequired,\n  isRtl: PropTypes.bool.isRequired,\n  history: PropTypes.object.isRequired // eslint-disable-line react/forbid-prop-types\n\n};\nApp.defaultProps = {\n  loading: true,\n  dialogComponent: '',\n  dialogType: null\n};\n\nfunction mapStateToProps(state) {\n  return {\n    loading: state.shared.loading,\n    isDialogRender: state.dialog.isRender,\n    dialogTitle: state.dialog.title,\n    dialogComponent: state.dialog.component,\n    dialogType: state.dialog.type,\n    isDrawerRender: state.drawer.isRender,\n    isRtl: state.shared.isRtl(),\n    languages: state.shared.supportedLanguages,\n    language: state.shared.language\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    openDialog: bindActionCreators(OpenDialogAction, dispatch),\n    closeDialog: bindActionCreators(CloseDialogAction, dispatch),\n    closeDrawer: bindActionCreators(CloseDrawerAction, dispatch),\n    changeLanguage: bindActionCreators(ChangeLanguageAction, dispatch),\n    fetchLoggedInUser: bindActionCreators(FetchLoggedInUserAction, dispatch),\n    startLoader: bindActionCreators(StartLoaderAction, dispatch),\n    stopLoader: bindActionCreators(StopLoaderAction, dispatch),\n    setTitle: bindActionCreators(SetTitleAction, dispatch)\n  };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(withTranslation()(App)));","map":{"version":3,"sources":["/Users/user/react-starter/src/features/pages/app/app.page.jsx"],"names":["React","Component","connect","bindActionCreators","withRouter","withTranslation","PropTypes","SpinnerComponent","DialogComponent","DrawerComponent","OpenDialogAction","CloseDialogAction","ROUTES","CloseDrawerAction","ChangeLanguageAction","StartLoaderAction","StopLoaderAction","SetTitleAction","FetchLoggedInUserAction","App","componentDidMount","props","history","location","setTitle","initiateData","pathname","empty","push","home","listen","path","onChangeLanguage","language","changeLanguage","startLoader","stopLoader","fetchLoggedInUser","openDialog","t","then","render","isRtl","loading","children","isDialogRender","dialogComponent","closeDrawer","languages","dialogTitle","dialogType","isDrawerRender","closeDialog","propTypes","bool","element","isRequired","oneOfType","string","shape","object","defaultProps","mapStateToProps","state","shared","dialog","isRender","title","component","type","drawer","supportedLanguages","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { withTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\nimport SpinnerComponent from '../../components/spinner/spinner.component.jsx';\nimport DialogComponent from '../../components/dialog/dialog.component.jsx';\nimport DrawerComponent from '../../components/drawer/drawer.component.jsx';\nimport { OpenDialogAction, CloseDialogAction } from '../../../common/state/dialog/dialog.actions';\nimport { ROUTES } from '../../../common/constants';\nimport { CloseDrawerAction } from '../../../common/state/drawer/drawer.actions';\nimport {\n  ChangeLanguageAction,\n  StartLoaderAction,\n  StopLoaderAction,\n  SetTitleAction\n} from '../../../common/state/shared/shared.actions';\nimport { FetchLoggedInUserAction } from '../../../common/state/auth/auth.actions';\n\nclass App extends Component {\n  componentDidMount () {\n    const { history, location, setTitle } = this.props;\n    this.initiateData();\n\n    // redirect to homepage if route is empty\n    if (location.pathname === ROUTES.empty) {\n      history.push(ROUTES.home);\n    }\n\n    // set site title on route change\n    setTitle(ROUTES.home);\n    history.listen(path => setTitle(path.pathname));\n  }\n\n  onChangeLanguage (language) {\n    const { changeLanguage } = this.props;\n    changeLanguage(language);\n  }\n\n  initiateData () {\n    const {\n      startLoader, stopLoader, fetchLoggedInUser, openDialog, t\n    } = this.props;\n\n    startLoader();\n    fetchLoggedInUser()\n      .then(() => stopLoader())\n      .then(() => openDialog(t('WELCOME_TITLE'), t('WELCOME_MESSAGE')));\n  }\n\n  render () {\n    const {\n      isRtl, loading, children, isDialogRender, dialogComponent, closeDrawer, languages,\n      dialogTitle, dialogType, isDrawerRender, closeDialog, changeLanguage, language\n    } = this.props;\n\n    return (\n      <div dir={isRtl ? 'rtl' : 'ltr'}>\n\n        {/* Loader */}\n        {loading && <SpinnerComponent />}\n\n        {/* Routes */}\n        {children}\n\n        {/* Dialog */}\n        <DialogComponent\n          open={isDialogRender}\n          title={dialogTitle}\n          type={dialogType}\n          closeDialog={closeDialog}\n          component={dialogComponent || ''}\n          isRtl={isRtl}\n        />\n\n        {/* Drawer menu */}\n        <DrawerComponent\n          open={isDrawerRender}\n          languages={languages}\n          language={language}\n          closeDrawer={closeDrawer}\n          onChangeLanguage={changeLanguage}\n          isRtl={isRtl}\n        />\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  loading: PropTypes.bool,\n  children: PropTypes.element.isRequired,\n  isDialogRender: PropTypes.bool.isRequired,\n  dialogComponent: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\n  dialogTitle: PropTypes.string.isRequired,\n  dialogType: PropTypes.string,\n  isDrawerRender: PropTypes.bool.isRequired,\n  languages: PropTypes.shape({ [PropTypes.string]: PropTypes.string }).isRequired,\n  language: PropTypes.string.isRequired,\n  isRtl: PropTypes.bool.isRequired,\n  history: PropTypes.object.isRequired // eslint-disable-line react/forbid-prop-types\n};\n\nApp.defaultProps = {\n  loading: true,\n  dialogComponent: '',\n  dialogType: null\n};\n\nfunction mapStateToProps (state) {\n  return {\n    loading: state.shared.loading,\n    isDialogRender: state.dialog.isRender,\n    dialogTitle: state.dialog.title,\n    dialogComponent: state.dialog.component,\n    dialogType: state.dialog.type,\n    isDrawerRender: state.drawer.isRender,\n    isRtl: state.shared.isRtl(),\n    languages: state.shared.supportedLanguages,\n    language: state.shared.language\n  };\n}\n\nfunction mapDispatchToProps (dispatch) {\n  return {\n    openDialog: bindActionCreators(OpenDialogAction, dispatch),\n    closeDialog: bindActionCreators(CloseDialogAction, dispatch),\n    closeDrawer: bindActionCreators(CloseDrawerAction, dispatch),\n    changeLanguage: bindActionCreators(ChangeLanguageAction, dispatch),\n    fetchLoggedInUser: bindActionCreators(FetchLoggedInUserAction, dispatch),\n    startLoader: bindActionCreators(StartLoaderAction, dispatch),\n    stopLoader: bindActionCreators(StopLoaderAction, dispatch),\n    setTitle: bindActionCreators(SetTitleAction, dispatch)\n  };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(withTranslation()(App)));\n"]},"metadata":{},"sourceType":"module"}